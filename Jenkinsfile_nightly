#!groovy

properties([
  pipelineTriggers([cron('0 1 * * 1-5')])
])

@Library("Infrastructure")

import uk.gov.hmcts.contino.AppPipelineConfig

def type = "nodejs"
def product = "prl"
def component = "citizen-frontend"

def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

// SAUCELABS config - configured on Jenkins
env.SAUCE_USERNAME = 'username'
env.SAUCE_ACCESS_KEY = 'privatekey'
env.SAUCE_TUNNEL_IDENTIFIER = 'reformtunnel'

def secrets = [
  'prl-${env}': [
    secret('AppInsightsInstrumentationKey', 'APP_INSIGHTS_INSTRUMENTATION_KEY'),
    secret('prl-citizen-frontend-idam-client-secret', 'CITIZEN_IDAM_SECRET'),
    secret('prl-cos-idam-client-secret', 'COS_API_IDAM_SECRET'),
    secret('postcode-lookup-token', 'POSTCODE_TOKEN'),
    secret('citizen-upload-docs-email', 'UPLOAD_DOCUMENTS_EMAIL'),
    secret('launchDarkly-sdk-key', 'LAUNCH_DARKLY_SDK_KEY'),
    secret('microservicekey-prl-citizen-frontend', 'SERVICE_AUTH_SECRET'),
    secret('system-update-user-username', 'SYSTEM_UPDATE_USER_USERNAME'),
    secret('system-update-user-password', 'SYSTEM_UPDATE_USER_PASSWORD'),
    secret('citizen-user', 'CITIZEN_USERNAME'),
    secret('citizen-password', 'CITIZEN_PASSWORD')
  ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   version    : '',
   envVariable: envVar
  ]
}

def pipelineConf = new AppPipelineConfig()
pipelineConf.vaultSecrets = secrets

withNightlyPipeline(type, product, component) {
  env.TEST_URL = "https://privatelaw.aat.platform.hmcts.net/"
  loadVaultSecrets(secrets)
  // enableMutationTest()
  enableFortifyScan()
  enableFullFunctionalTest(120)
  enableCrossBrowserTest(['chrome', 'firefox','microsoft'])
  enableFortifyScan()
  enableSecurityScan()

  afterAlways('test') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'coverage/**/*'
  }

  before('crossBrowserTest') {
  }

  afterAlways('crossBrowserTest') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }

  before('fullFunctionalTest') {
    env.PARALLEL_CHUNKS = params.FUNCTIONAL_TESTS_WORKERS
  }

  afterAlways('fullFunctionalTest') {
    archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }

  afterAlways('fortify-scan') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/Fortify Scan/**/*'
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/**/*'
  }
}

