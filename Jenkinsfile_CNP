#!groovy

@Library("Infrastructure")

import uk.gov.hmcts.contino.AppPipelineConfig
import uk.gov.hmcts.contino.AppPipelineDsl
import uk.gov.hmcts.contino.GithubAPI

def type = "nodejs"
def product = "prl"
def component = "citizen-frontend"

def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   version    : '',
   envVariable: envVar
  ]
}

def secrets = [
  'prl-${env}': [
    secret('AppInsightsInstrumentationKey', 'APP_INSIGHTS_INSTRUMENTATION_KEY'),
    secret('prl-citizen-frontend-idam-client-secret', 'CITIZEN_IDAM_SECRET'),
    secret('prl-cos-idam-client-secret', 'COS_API_IDAM_SECRET'),
    secret('launchDarkly-sdk-key', 'LAUNCH_DARKLY_SDK_KEY'),
    secret('postcode-lookup-token', 'POSTCODE_TOKEN'),
    secret('citizen-upload-docs-email', 'UPLOAD_DOCUMENTS_EMAIL'),
    secret('microservicekey-prl-citizen-frontend', 'SERVICE_AUTH_SECRET'),
    secret('system-update-user-username', 'SYSTEM_UPDATE_USER_USERNAME'),
    secret('system-update-user-password', 'SYSTEM_UPDATE_USER_PASSWORD'),
    secret('citizen-user', 'CITIZEN_USERNAME'),
    secret('citizen-password', 'CITIZEN_PASSWORD')
  ]
]

def pipelineConf = new AppPipelineConfig()
pipelineConf.vaultSecrets = secrets

env.IDAM_URL = 'https://idam-api.aat.platform.hmcts.net'
env.C100_REBUILD_FLAG = false
env.LAUNCH_DARKLY_OFFLINE_MODE = false

withPipeline(type, product, component) {
  loadVaultSecrets(secrets)
  enablePactAs([ AppPipelineDsl.PactRoles.CONSUMER ])
  enableAksStagingDeployment()
  disableLegacyDeployment()
  enableSlackNotifications('#prl-tech-notifications')

  onMaster {
    env.PACT_TAG = 'master'
  }
  afterAlways('build') {
    yarnBuilder.yarn('build')
  }

  onPR() {
    env.ENV = 'preview'
    def githubApi = new GithubAPI(this)
    if (!githubApi.getLabelsbyPattern(env.BRANCH_NAME, "keep-helm")) {
        enableCleanupOfHelmReleaseOnSuccess()
    }
  }

  before('smoketest:preview') {
    env.PRL_CITIZEN_URL = "https://prl-citizen-frontend-pr-${CHANGE_ID}.service.core-compute-preview.internal/"
  }

  afterAlways('smoketest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }

  before('smoketest:aat') {
    env.PRL_CITIZEN_URL = "https://prl-citizen-frontend.aat.platform.hmcts.net/"
  }

  afterAlways('smoketest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }

  before('functionalTest:preview') {
    env.PRL_CITIZEN_URL = "https://prl-citizen-frontend-pr-${CHANGE_ID}.service.core-compute-preview.internal/"
    yarnBuilder.yarn('test:pa11y')
  }

  afterAlways('functionalTest:preview') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }

  before('functionalTest:aat') {
    env.PRL_CITIZEN_URL = "https://prl-citizen-frontend.aat.platform.hmcts.net/"
    yarnBuilder.yarn('test:functional:skip')
  }

  afterAlways('functionalTest:aat') {
    yarnBuilder.yarn('test:pa11y')
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }
}
